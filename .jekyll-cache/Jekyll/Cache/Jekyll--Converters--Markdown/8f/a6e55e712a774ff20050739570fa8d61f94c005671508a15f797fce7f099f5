I"û<p>Here is a compilation of links shared by the members of the <a href="https://discord.gg/eZHycgpe">rigging-cfx france discord channel</a></p>

<h3 id="programming">PROGRAMMING</h3>

<p>Premature optimization: http://wiki.c2.com/?PrematureOptimization</p>

<p>Idiomatic Python: EAFP versus LBYL:
https://devblogs.microsoft.com/python/idiomatic-python-eafp-versus-lbyl/</p>

<p>Law of Demeter:
https://en.wikipedia.org/wiki/Law_of_Demeter</p>

<p>How to Think like a computer scientist:
http://openbookproject.net/thinkcs/python/english3e/index.html</p>

<p>Understanding Time complexity:
https://towardsdatascience.com/understanding-time-complexity-with-python-examples-2bda6e8158a7</p>

<p>Refactoring and Design Pattern:
https://refactoring.guru/</p>

<p>Hungarian Naming Convention:
https://www.byteshift.de/msg/hungarian-notation-doug-klunder</p>

<p>Hungarian Notation:
https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-6.0/aa260976(v=vs.60)?redirectedfrom=MSDN</p>

<p>SOLID: The First 5 Principles of Object Oriented Design:
https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design
=== PYTHON ===</p>

<p>PerformanceTips:
https://wiki.python.org/moin/PythonSpeed/PerformanceTips</p>

<p>Python Time Complexity:
https://wiki.python.org/moin/TimeComplexity</p>

<p>Python Patterns:
https://python-patterns.guide/</p>

<p>How Python Import Machinery Works:
https://alone-djangonaut.com/how-pythons-import-machinery-works</p>

<p>(Re)Importing in python - Donâ€™t touch sys.modules:
https://justus.science/blog/2015/04/19/sys.modules-is-dangerous.html</p>

<p>Refactoring by Martin Fowler:
https://python-patterns.guide/fowler-refactoring/</p>

<p>Python String Interning:
https://medium.com/@bdov_/https-medium-com-bdov-python-objects-part-iii-string-interning-625d3c7319de</p>

<p>What the fuck Python:
https://github.com/satwikkansal/wtfpython</p>

<p>Understand how much memory your Python object use:
https://code.tutsplus.com/tutorials/understand-how-much-memory-your-python-objects-useâ€“cms-25609</p>

<p>The Performance Impact of Using dict() Instead of {}:
https://doughellmann.com/posts/the-performance-impact-of-using-dict-instead-of-in-cpython-2-7-2/</p>

<p>Be careful with exec and eval in Python:</p>
<ul>
  <li>https://lucumr.pocoo.org/2011/2/1/exec-in-python/</li>
  <li>https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
=== QT ===</li>
</ul>

<p>PyQt. How to shoot yourself in the foot:
http://enki-editor.org/2014/08/23/Pyqt_mem_mgmt.html</p>

<p>Advanced Qt Programming: Model View:
https://www.informit.com/articles/article.aspx?p=1613548
=== MATHEMATICS ===</p>

<p>EuclideanSpace - Mathematics and Computing:
https://www.euclideanspace.com/</p>

<p>Detecting Approximate Reflection Symmetry in a
Point Set using Optimization on Manifold:
https://arxiv.org/pdf/1706.08801.pdf</p>

<p>Paul Bourke - Personal pages:
http://paulbourke.net/</p>

<p>Scratchapixel:
https://www.scratchapixel.com/index.php?redirect</p>

<p>Spatial Transformation Matrices:
https://www.brainvoyager.com/bv/doc/UsersGuide/CoordsAndTransforms/SpatialTransformationMatrices.html
=== TOOLS ===</p>

<p>Paletton:
https://paletton.com/#uid=1000u0kllllaFw0g0qFqFg0w0aF</p>

<p>Regex Cheat Sheet:
https://www.rexegg.com/regex-quickstart.html</p>

<p>pdf.io:
https://pdf.io/</p>

<p>Desmos - Graphing calculator:
https://www.desmos.com/calculator
=== PSYCHOLOGY ===</p>

<p>Broken Window Theory:
https://en.wikipedia.org/wiki/Broken_windows_theory
Gregory P â€” 30/04/2021
=== BLOGS ===</p>

<p>Je suis un dev:
https://www.jesuisundev.com/</p>

<p>skwi:
https://skwi.fr/blog/</p>

<p>Joels On Software:
https://www.joelonsoftware.com/</p>

<p>Jon Yablonski (UX Designer):
https://jonyablonski.com/</p>

<p>Hackernoon:
https://hackernoon.com/
=== Article ===</p>

<p>super() function in python raises a TypeError:
https://thomas-cokelaer.info/blog/2011/09/382/</p>

<p>When calling super() in a derived class, can I pass in self.class?:
https://stackoverflow.com/questions/18208683/when-calling-super-in-a-derived-class-can-i-pass-in-self-class</p>

<p>The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!):
https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</p>

<p>Egoless Programming:
https://blog.octo.com/egoless-programming/</p>

<p>Deep Exploration Into Python: Letâ€™s Review The Dict Module:
https://www.buzzfeednews.com/article/andrewkelleher/deep-exploration-into-python-lets-review-the-dict-module</p>

<p>Python Mutable Defaults Are The Source of All Evil:
https://florimond.dev/en/posts/2018/08/python-mutable-defaults-are-the-source-of-all-evil/</p>

<p>Laws Of UX:
https://lawsofux.com/
Jâ€™ai fais un petit tri pour vous retrouver que les bonnes refs, autres que les docs que tout le monde a, genre le blog de sam et max au pif :smile:</p>

<p>You can find the source code for Minima at GitHub:
<a href="https://github.com/jekyll">jekyll</a> /
<a href="https://github.com/jekyll/minima">minima</a></p>

<p>You can find the source code for Jekyll at GitHub:
<a href="https://github.com/jekyll">jekyll</a> /
<a href="https://github.com/jekyll/jekyll">jekyll</a></p>

:ET